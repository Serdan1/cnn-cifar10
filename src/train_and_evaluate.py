# src/train_and_evaluate.py

from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
from cnn_model import model

# üß† Cargar el dataset CIFAR-10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# üîÑ Normalizar los valores de p√≠xeles (0-255 ‚Üí 0-1)
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# üè∑Ô∏è Convertir etiquetas a formato one-hot
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# ‚öôÔ∏è COMPILACI√ìN DEL MODELO
# 'adam': optimizador eficiente y adaptativo
# 'categorical_crossentropy': p√©rdida para clasificaci√≥n multiclase
# 'accuracy': m√©trica principal de rendimiento
model.compile(
    optimizer=Adam(),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

print("‚úÖ Modelo compilado correctamente.")
model.summary()

# üß© ENTRENAMIENTO DEL MODELO

# Entrenar el modelo durante 10 √©pocas, usando 10% de los datos para validaci√≥n
history = model.fit(
    x_train, y_train,
    epochs=10,
    batch_size=64,
    validation_split=0.1,
    verbose=1
)

# Guardar el historial para an√°lisis posterior
print("‚úÖ Entrenamiento completado.")

# üßÆ EVALUACI√ìN DEL MODELO

# Evaluar el modelo sobre el conjunto de prueba
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1)

print(f"\nüìä Resultados en el conjunto de prueba:")
print(f"   P√©rdida (loss): {test_loss:.4f}")
print(f"   Precisi√≥n (accuracy): {test_accuracy:.4f}")

# üìà VISUALIZACI√ìN DE RESULTADOS

import matplotlib.pyplot as plt

# Extraer los datos de entrenamiento y validaci√≥n
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)

# Gr√°fico de precisi√≥n
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(epochs, acc, 'bo-', label='Entrenamiento')
plt.plot(epochs, val_acc, 'ro-', label='Validaci√≥n')
plt.title('Precisi√≥n del modelo')
plt.xlabel('√âpocas')
plt.ylabel('Precisi√≥n')
plt.legend()

# Gr√°fico de p√©rdida
plt.subplot(1, 2, 2)
plt.plot(epochs, loss, 'bo-', label='Entrenamiento')
plt.plot(epochs, val_loss, 'ro-', label='Validaci√≥n')
plt.title('P√©rdida del modelo')
plt.xlabel('√âpocas')
plt.ylabel('P√©rdida')
plt.legend()

plt.tight_layout()
plt.show()

